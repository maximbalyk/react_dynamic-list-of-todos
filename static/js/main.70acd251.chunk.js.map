{"version":3,"sources":["api/api.ts","components/TodoList/TodoList.tsx","components/CurrentUser/CurrentUser.tsx","App.tsx","index.tsx"],"names":["BASE_URL","getTasks","a","fetch","response","ok","Error","status","statusText","json","getUser","userId","TodoList","state","todos","query","filterBy","handelChange","event","setState","target","value","handelSelectChange","prepareTodos","visibleTodos","filter","todo","title","toLowerCase","includes","completed","this","props","onSelectedId","selectedId","selectedUserId","className","type","onChange","placeholder","map","classNames","readOnly","checked","onClick","id","React","Component","CurrentUser","user","reloadUser","prevProps","resetUser","name","email","phone","App","resetSelectUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.70acd251.chunk.js","sourcesContent":["const BASE_URL = 'https://mate.academy/students-api';\n\nexport const getTasks = async () => {\n  const response = await fetch(`${BASE_URL}/todos`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getUser = async (userId: number) => {\n  const response = await fetch(`${BASE_URL}/users/${userId}`);\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n","import classNames from 'classnames';\nimport React from 'react';\nimport './TodoList.scss';\nimport { getTasks } from '../../api/api';\n\ntype Props = {\n  selectedUserId: number;\n  selectedId: (userId: number) => void;\n};\n\ntype State = {\n  userId: number;\n  todos: Todo[] | [];\n  query: string;\n  filterBy: string;\n};\n\nexport class TodoList extends React.Component<Props, State> {\n  state: State = {\n    userId: 0,\n    todos: [],\n    query: '',\n    filterBy: '',\n  };\n\n  async componentDidMount() {\n    const todos = await getTasks();\n\n    this.setState({ todos });\n  }\n\n  handelChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    this.setState({ query: event.target.value });\n  };\n\n  handelSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    this.setState({ filterBy: event.target.value });\n  };\n\n  prepareTodos = () => {\n    const { todos, query, filterBy } = this.state;\n    let visibleTodos = todos.filter(todo => (\n      todo.title.toLowerCase().includes(query.toLowerCase())\n    ));\n\n    if (filterBy) {\n      visibleTodos = visibleTodos.filter(todo => {\n        switch (filterBy) {\n          case 'active':\n            return !todo.completed;\n          case 'completed':\n            return todo.completed;\n          case 'all':\n            return todo;\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return visibleTodos;\n  };\n\n  render() {\n    const visibleTodos = this.prepareTodos();\n    const { userId, query, filterBy } = this.state;\n    const { selectedId: onSelectedId, selectedUserId } = this.props;\n\n    return (\n      <div className=\"TodoList\">\n        <h2>Todos:</h2>\n        <div className=\"TodoList__form\">\n          <input\n            type=\"text\"\n            value={query}\n            className=\"TodoList__item item\"\n            onChange={(event) => (\n              this.handelChange(event)\n            )}\n            placeholder=\"Enter your task\"\n          />\n          <select\n            value={filterBy}\n            className=\"TodoList__item\"\n            onChange={(event => (\n              this.handelSelectChange(event)\n            ))}\n          >\n            <option value=\"all\">All</option>\n            <option value=\"active\">Active</option>\n            <option value=\"completed\">Completed</option>\n          </select>\n        </div>\n\n        <div className=\"TodoList__list-container\">\n          <ul className=\"TodoList__list\">\n            {visibleTodos.map(todo => (\n              <li\n                key={todo.id}\n                className={classNames(\n                  'TodoList__item',\n                  {\n                    'TodoList__item--unchecked': !todo.completed,\n                    'TodoList__item--checked': todo.completed,\n                  },\n                )}\n              >\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    readOnly\n                    checked={todo.completed}\n                  />\n                  <p>{todo.title}</p>\n                </label>\n\n                <button\n                  className={classNames(\n                    'TodoList__user-button button',\n                    {\n                      'TodoList__user-button--selected button': todo.userId === selectedUserId,\n                    },\n                  )}\n                  type=\"button\"\n                  value={userId}\n                  onClick={() => (\n                    onSelectedId(todo.userId)\n                  )}\n                >\n                  User&nbsp;#\n                  {todo.userId}\n                </button>\n              </li>\n\n            ))}\n          </ul>\n        </div>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport { getUser } from '../../api/api';\nimport './CurrentUser.scss';\n\ninterface Props {\n  selectedUserId: number;\n  resetUser: () => void\n}\n\ntype State = {\n  user: User | null;\n};\nexport class CurrentUser extends React.Component<Props, State> {\n  state: State = {\n    user: null,\n  };\n\n  async componentDidMount() {\n    this.reloadUser(this.props.selectedUserId);\n  }\n\n  async componentDidUpdate(prevProps: Props) {\n    if (prevProps.selectedUserId !== this.props.selectedUserId) {\n      this.reloadUser(this.props.selectedUserId);\n    }\n  }\n\n  async reloadUser(userId: number) {\n    const user = await getUser(userId);\n\n    this.setState({ user });\n  }\n\n  render() {\n    const { user } = this.state;\n    const { resetUser } = this.props;\n\n    if (!user) {\n      return (\n        <div className=\"CurrentUser\">\n          <span>User not found</span>\n        </div>\n      );\n    }\n\n    return (\n      <div className=\"CurrentUser\">\n        <h2 className=\"CurrentUser__title\">\n          <span>\n            {`Selected user: ${user.id}`}\n          </span>\n        </h2>\n\n        <h3 className=\"CurrentUser__name\">\n          {user.name}\n        </h3>\n        <p className=\"CurrentUser__email\">\n          {user.email}\n        </p>\n        <p className=\"CurrentUser__phone\">\n          {user.phone}\n        </p>\n        <button\n          className=\"button button--reset\"\n          type=\"button\"\n          onClick={resetUser}\n        >\n          Reset\n        </button>\n      </div>\n    );\n  }\n}\n","import React from 'react';\nimport './App.scss';\nimport './styles/general.scss';\nimport { TodoList } from './components/TodoList';\nimport { CurrentUser } from './components/CurrentUser';\n\ninterface State {\n  selectedUserId: number;\n}\n\nclass App extends React.Component<{}, State> {\n  state: State = {\n    selectedUserId: 0,\n  };\n\n  resetSelectUser = () => {\n    this.setState({ selectedUserId: 0 });\n  };\n\n  selectedId = (userId: number) => {\n    this.setState({ selectedUserId: userId });\n  };\n\n  render() {\n    const { selectedUserId } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"App__sidebar\">\n          <TodoList\n            selectedId={this.selectedId}\n            selectedUserId={selectedUserId}\n          />\n        </div>\n\n        <div className=\"App__content\">\n          <div className=\"App__content-container\">\n            {selectedUserId ? (\n              <CurrentUser\n                selectedUserId={selectedUserId}\n                resetUser={this.resetSelectUser}\n              />\n            ) : 'No user selected'}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}